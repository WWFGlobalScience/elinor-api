# Generated by Django 4.2.16 on 2025-01-01 19:55

import api.models.base
import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_es", models.CharField(max_length=255, null=True)),
                ("name_ind", models.CharField(max_length=255, null=True)),
                ("name_pt", models.CharField(max_length=255, null=True)),
                ("name_sw", models.CharField(max_length=255, null=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (90, "not finalized"),
                            (80, "test"),
                            (10, "finalized"),
                        ],
                        default=90,
                    ),
                ),
                (
                    "data_policy",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (90, "public")], default=10
                    ),
                ),
                (
                    "person_responsible_role",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "nonprofit staff"),
                            (20, "management area manager"),
                            (30, "management area personnel"),
                            (40, "government personnel"),
                            (50, "members of local community / indigenous committees"),
                            (60, "community leaders / representatives"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "person_responsible_role_other",
                    models.CharField(blank=True, max_length=255),
                ),
                ("year", models.PositiveSmallIntegerField()),
                (
                    "count_community",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="local community leader count"
                    ),
                ),
                (
                    "count_ngo",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="NGO personnel count"
                    ),
                ),
                (
                    "count_academic",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="academic personnel count"
                    ),
                ),
                (
                    "count_government",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="government personnel count"
                    ),
                ),
                (
                    "count_private",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="private sector personnel count"
                    ),
                ),
                (
                    "count_indigenous",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="indigenous leader count"
                    ),
                ),
                (
                    "count_gender_female",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="female count"
                    ),
                ),
                (
                    "count_gender_male",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="male count"
                    ),
                ),
                (
                    "count_gender_nonbinary",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="non-binary count"
                    ),
                ),
                (
                    "count_gender_prefer_not_say",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="prefer not to declare gender count"
                    ),
                ),
                ("consent_given", models.BooleanField(default=False)),
                ("consent_given_written", models.BooleanField(default=False)),
                (
                    "management_plan_file",
                    models.FileField(blank=True, null=True, upload_to="upload"),
                ),
                (
                    "collection_method",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "Desk-based assessment"),
                            (30, "Field-based assessment"),
                            (50, "Other (please provide details below)"),
                        ],
                        null=True,
                        verbose_name="Please choose which option best describes how information for this assessment was collected",
                    ),
                ),
                ("collection_method_text", models.TextField(blank=True)),
                ("collection_method_text_en", models.TextField(blank=True, null=True)),
                ("collection_method_text_es", models.TextField(blank=True, null=True)),
                ("collection_method_text_ind", models.TextField(blank=True, null=True)),
                ("collection_method_text_pt", models.TextField(blank=True, null=True)),
                ("collection_method_text_sw", models.TextField(blank=True, null=True)),
                ("strengths_explanation", models.TextField(blank=True)),
                ("strengths_explanation_en", models.TextField(blank=True, null=True)),
                ("strengths_explanation_es", models.TextField(blank=True, null=True)),
                ("strengths_explanation_ind", models.TextField(blank=True, null=True)),
                ("strengths_explanation_pt", models.TextField(blank=True, null=True)),
                ("strengths_explanation_sw", models.TextField(blank=True, null=True)),
                ("needs_explanation", models.TextField(blank=True)),
                ("needs_explanation_en", models.TextField(blank=True, null=True)),
                ("needs_explanation_es", models.TextField(blank=True, null=True)),
                ("needs_explanation_ind", models.TextField(blank=True, null=True)),
                ("needs_explanation_pt", models.TextField(blank=True, null=True)),
                ("needs_explanation_sw", models.TextField(blank=True, null=True)),
                ("context", models.TextField(blank=True)),
                ("context_en", models.TextField(blank=True, null=True)),
                ("context_es", models.TextField(blank=True, null=True)),
                ("context_ind", models.TextField(blank=True, null=True)),
                ("context_pt", models.TextField(blank=True, null=True)),
                ("context_sw", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name", "year"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("year", models.PositiveSmallIntegerField()),
                ("major_version", models.PositiveSmallIntegerField()),
                ("text", models.TextField(blank=True)),
                ("text_en", models.TextField(blank=True, null=True)),
                ("text_es", models.TextField(blank=True, null=True)),
                ("text_ind", models.TextField(blank=True, null=True)),
                ("text_pt", models.TextField(blank=True, null=True)),
                ("text_sw", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["year", "major_version"],
            },
        ),
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                ("required", models.BooleanField(default=False)),
                ("order", models.PositiveSmallIntegerField(unique=True)),
                ("description", models.TextField(blank=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_es", models.TextField(blank=True, null=True)),
                ("description_ind", models.TextField(blank=True, null=True)),
                ("description_pt", models.TextField(blank=True, null=True)),
                ("description_sw", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="GovernanceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ManagementArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_es", models.CharField(max_length=255, null=True)),
                ("name_ind", models.CharField(max_length=255, null=True)),
                ("name_pt", models.CharField(max_length=255, null=True)),
                ("name_sw", models.CharField(max_length=255, null=True)),
                (
                    "wdpa_protected_area",
                    models.IntegerField(blank=True, null=True, verbose_name="WDPA ID"),
                ),
                ("date_established", models.DateField(blank=True, null=True)),
                ("version_date", models.DateField(default=datetime.date.today)),
                (
                    "recognition_level",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(
                            choices=[
                                ("local", "local"),
                                ("national", "national"),
                                ("international", "international"),
                            ]
                        ),
                        blank=True,
                        size=None,
                    ),
                ),
                (
                    "countries",
                    django_countries.fields.CountryField(
                        blank=True, max_length=746, multiple=True
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "reported_size",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=11, null=True
                    ),
                ),
                (
                    "point",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "import_file",
                    models.FileField(blank=True, null=True, upload_to="upload"),
                ),
                (
                    "map_image",
                    models.ImageField(blank=True, null=True, upload_to="upload"),
                ),
                ("geospatial_sources", models.TextField(blank=True)),
                ("geospatial_sources_en", models.TextField(blank=True, null=True)),
                ("geospatial_sources_es", models.TextField(blank=True, null=True)),
                ("geospatial_sources_ind", models.TextField(blank=True, null=True)),
                ("geospatial_sources_pt", models.TextField(blank=True, null=True)),
                ("geospatial_sources_sw", models.TextField(blank=True, null=True)),
                ("objectives", models.TextField(blank=True)),
                ("objectives_en", models.TextField(blank=True, null=True)),
                ("objectives_es", models.TextField(blank=True, null=True)),
                ("objectives_ind", models.TextField(blank=True, null=True)),
                ("objectives_pt", models.TextField(blank=True, null=True)),
                ("objectives_sw", models.TextField(blank=True, null=True)),
                (
                    "containedby",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mas_inside",
                        to="api.managementarea",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "governance_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="governance_mas",
                        to="api.governancetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "management area",
                "ordering": ["name", "date_established"],
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SurveyQuestionLikert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("key", models.CharField(max_length=255, unique=True)),
                ("number", models.PositiveSmallIntegerField()),
                ("text", models.TextField()),
                ("text_en", models.TextField(null=True)),
                ("text_es", models.TextField(null=True)),
                ("text_ind", models.TextField(null=True)),
                ("text_pt", models.TextField(null=True)),
                ("text_sw", models.TextField(null=True)),
                ("rationale", models.TextField()),
                ("rationale_en", models.TextField(null=True)),
                ("rationale_es", models.TextField(null=True)),
                ("rationale_ind", models.TextField(null=True)),
                ("rationale_pt", models.TextField(null=True)),
                ("rationale_sw", models.TextField(null=True)),
                ("information", models.TextField()),
                ("information_en", models.TextField(null=True)),
                ("information_es", models.TextField(null=True)),
                ("information_ind", models.TextField(null=True)),
                ("information_pt", models.TextField(null=True)),
                ("information_sw", models.TextField(null=True)),
                ("guidance", models.TextField()),
                ("guidance_en", models.TextField(null=True)),
                ("guidance_es", models.TextField(null=True)),
                ("guidance_ind", models.TextField(null=True)),
                ("guidance_pt", models.TextField(null=True)),
                ("guidance_sw", models.TextField(null=True)),
                ("poor_0", models.TextField()),
                ("poor_0_en", models.TextField(null=True)),
                ("poor_0_es", models.TextField(null=True)),
                ("poor_0_ind", models.TextField(null=True)),
                ("poor_0_pt", models.TextField(null=True)),
                ("poor_0_sw", models.TextField(null=True)),
                ("average_1", models.TextField()),
                ("average_1_en", models.TextField(null=True)),
                ("average_1_es", models.TextField(null=True)),
                ("average_1_ind", models.TextField(null=True)),
                ("average_1_pt", models.TextField(null=True)),
                ("average_1_sw", models.TextField(null=True)),
                ("good_2", models.TextField()),
                ("good_2_en", models.TextField(null=True)),
                ("good_2_es", models.TextField(null=True)),
                ("good_2_ind", models.TextField(null=True)),
                ("good_2_pt", models.TextField(null=True)),
                ("good_2_sw", models.TextField(null=True)),
                ("excellent_3", models.TextField()),
                ("excellent_3_en", models.TextField(null=True)),
                ("excellent_3_es", models.TextField(null=True)),
                ("excellent_3_ind", models.TextField(null=True)),
                ("excellent_3_pt", models.TextField(null=True)),
                ("excellent_3_sw", models.TextField(null=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="attribute_questions",
                        to="api.attribute",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Likert survey question",
                "ordering": ["attribute", "number"],
            },
        ),
        migrations.CreateModel(
            name="SupportSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StakeholderGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_es", models.CharField(max_length=255, null=True)),
                ("name_ind", models.CharField(max_length=255, null=True)),
                ("name_pt", models.CharField(max_length=255, null=True)),
                ("name_sw", models.CharField(max_length=255, null=True)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "country")},
            },
        ),
        migrations.CreateModel(
            name="ProtectedArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "accept_tor",
                    models.BooleanField(default=False, verbose_name="accept ToR"),
                ),
                (
                    "affiliation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.organization",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
            },
        ),
        migrations.CreateModel(
            name="ManagementAuthority",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_es", models.CharField(max_length=255, null=True, unique=True)),
                ("name_ind", models.CharField(max_length=255, null=True, unique=True)),
                ("name_pt", models.CharField(max_length=255, null=True, unique=True)),
                ("name_sw", models.CharField(max_length=255, null=True, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "management authorities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ManagementAreaZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_es", models.CharField(max_length=255, null=True)),
                ("name_ind", models.CharField(max_length=255, null=True)),
                ("name_pt", models.CharField(max_length=255, null=True)),
                ("name_sw", models.CharField(max_length=255, null=True)),
                (
                    "access_level",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (90, "Open access (open for extraction and entering)"),
                            (50, "Fully restricted access (total extraction ban)"),
                            (
                                10,
                                "Partially Restricted (e.g., periodic closures, restriction by use type, restriction by activity type, species restrictions, gear restrictions, etc.)",
                            ),
                        ],
                        default=90,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_es", models.TextField(blank=True, null=True)),
                ("description_ind", models.TextField(blank=True, null=True)),
                ("description_pt", models.TextField(blank=True, null=True)),
                ("description_sw", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "management_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ma_zones",
                        to="api.managementarea",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "management area zone",
            },
        ),
        migrations.AddField(
            model_name="managementarea",
            name="management_authority",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.managementauthority",
            ),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="versions",
                to="api.managementarea",
            ),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="protected_area",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.protectedarea",
            ),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="regions",
            field=models.ManyToManyField(blank=True, to="api.region"),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="stakeholder_groups",
            field=models.ManyToManyField(blank=True, to="api.stakeholdergroup"),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="support_sources",
            field=models.ManyToManyField(blank=True, to="api.supportsource"),
        ),
        migrations.AddField(
            model_name="managementarea",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)s_updated_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_es", models.CharField(max_length=255, null=True)),
                ("name_ind", models.CharField(max_length=255, null=True)),
                ("name_pt", models.CharField(max_length=255, null=True)),
                ("name_sw", models.CharField(max_length=255, null=True)),
                ("publication_date", models.DateField()),
                ("file", models.FileField(upload_to="upload")),
                ("description", models.TextField(blank=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_es", models.TextField(blank=True, null=True)),
                ("description_ind", models.TextField(blank=True, null=True)),
                ("description_pt", models.TextField(blank=True, null=True)),
                ("description_sw", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "version",
                    models.ForeignKey(
                        default=api.models.base.latest_version,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="api.assessmentversion",
                    ),
                ),
            ],
            options={
                "ordering": ["-version__year", "-version__major_version", "name"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentFlag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("datetime_resolved", models.DateTimeField(blank=True, null=True)),
                (
                    "flag_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("inappropriate", "inappropriate language or content"),
                            ("personal", "personal information"),
                            ("inaccurate", "inaccurate details"),
                        ],
                        max_length=20,
                    ),
                ),
                ("flag_type_other", models.CharField(blank=True, max_length=255)),
                ("explanation", models.TextField()),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_flags",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reporter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assessment_flags",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_on", "assessment", "reporter__username"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("event_on", models.DateTimeField(auto_now_add=True)),
                (
                    "event_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "submit Assessment"),
                            (2, "re-open Assessment"),
                            (5, "make Assessment public"),
                            (6, "make Assessment private"),
                            (10, "edit Assessment"),
                        ]
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_changes",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assessment_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="attributes",
            field=models.ManyToManyField(blank=True, to="api.attribute"),
        ),
        migrations.AddField(
            model_name="assessment",
            name="checkout",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checked_out_assessments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)s_created_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="management_area",
            field=models.OneToOneField(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="api.managementarea",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.organization",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="person_responsible",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="collaborator_aps",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="published_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="api.assessmentversion",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)s_updated_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ActiveLanguage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("code", models.CharField(max_length=15, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("active", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["code", "name"],
            },
        ),
        migrations.CreateModel(
            name="SurveyAnswerLikert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "choice",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "poor [0]"),
                            (1, "average [1]"),
                            (2, "good [2]"),
                            (3, "excellent [3]"),
                        ],
                        null=True,
                    ),
                ),
                ("explanation", models.TextField(blank=True)),
                ("explanation_en", models.TextField(blank=True, null=True)),
                ("explanation_es", models.TextField(blank=True, null=True)),
                ("explanation_ind", models.TextField(blank=True, null=True)),
                ("explanation_pt", models.TextField(blank=True, null=True)),
                ("explanation_sw", models.TextField(blank=True, null=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="survey_answer_likerts",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="questionlikert_answers",
                        to="api.surveyquestionlikert",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Likert survey answer",
                "ordering": ["question__attribute__order", "question__number"],
                "unique_together": {("assessment", "question")},
            },
        ),
        migrations.CreateModel(
            name="Collaborator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(70, "admin"), (40, "contributor"), (10, "observer")]
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collaborators",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("assessment", "user")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="assessment",
            unique_together={("management_area", "year")},
        ),
    ]
