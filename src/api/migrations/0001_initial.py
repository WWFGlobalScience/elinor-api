# Generated by Django 3.2.2 on 2021-06-10 02:47

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "published")],
                        default=90,
                    ),
                ),
                (
                    "data_policy",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (90, "public")], default=90
                    ),
                ),
                (
                    "person_responsible_role",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (10, "nonprofit staff"),
                            (20, "management area manager"),
                            (30, "management area personnel"),
                            (40, "government personnel"),
                            (50, "members of local community / indigenous committees"),
                            (60, "community leaders / representatives"),
                        ]
                    ),
                ),
                ("year", models.PositiveSmallIntegerField()),
                (
                    "count_manager",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="MA manager count"
                    ),
                ),
                (
                    "count_personnel",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="MA personnel count"
                    ),
                ),
                (
                    "count_government",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="government personnel count"
                    ),
                ),
                (
                    "count_committee",
                    models.PositiveSmallIntegerField(
                        default=0,
                        verbose_name="local community/indigenous committee count",
                    ),
                ),
                (
                    "count_community",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="community leader count"
                    ),
                ),
                ("consent_given", models.BooleanField(default=False)),
                (
                    "management_plan_file",
                    models.FileField(blank=True, null=True, upload_to="upload"),
                ),
                (
                    "stakeholder_harvest_rights",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are there formal or informal rules that clearly define the rights of local stakeholders to harvest resources within the MA?",
                    ),
                ),
                ("stakeholder_harvest_rights_text", models.TextField(blank=True)),
                (
                    "stakeholder_develop_rules",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are there formal or informal rules that clearly define the rights of local stakeholders to develop rules for the use of resources within the MA?",
                    ),
                ),
                ("stakeholder_develop_rules_text", models.TextField(blank=True)),
                (
                    "stakeholder_exclude_others",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are there formal or informal rules that clearly define the rights of local stakeholders to exclude other groups from harvesting resources within the MA?",
                    ),
                ),
                ("stakeholder_exclude_others_text", models.TextField(blank=True)),
                (
                    "vulnerable_defined_rights",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do women or other vulnerable groups living in the local community have clearly defined rights to natural resources within the MA?",
                    ),
                ),
                ("vulnerable_defined_rights_text", models.TextField(blank=True)),
                (
                    "legislation_exists",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is there legislation in place to enable resource management by local communities?",
                    ),
                ),
                ("legislation_exists_text", models.TextField(blank=True)),
                (
                    "rights_governance",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are rights to harvest or benefit from resources within the MA related to the contributions of local stakeholders to the governance of the MA (in terms of time and/or resources contributed)?",
                    ),
                ),
                ("rights_governance_text", models.TextField(blank=True)),
                (
                    "exercise_rights",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are local stakeholders able to exercise their rights to natural resources?",
                    ),
                ),
                ("exercise_rights_text", models.TextField(blank=True)),
                (
                    "benefits_shared",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is there an effective strategy or guideline for ensuring benefits from the MA are shared equitably among local stakeholders?",
                    ),
                ),
                ("benefits_shared_text", models.TextField(blank=True)),
                (
                    "stakeholder_agency",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="To what extent are local stakeholders affected by the rules able to play a role in making changes to the rules?",
                    ),
                ),
                ("stakeholder_agency_text", models.TextField(blank=True)),
                (
                    "governance_accountable",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are those responsible for governance of the MA held to account if they do not perform their role?",
                    ),
                ),
                ("governance_accountable_text", models.TextField(blank=True)),
                (
                    "timely_information",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do stakeholders receive information from MA authorities in a timely manner?",
                    ),
                ),
                ("timely_information_text", models.TextField(blank=True)),
                (
                    "penalties_fair",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Formally, are the penalties for breaking resource use rules equal to the size of the offence?",
                    ),
                ),
                ("penalties_fair_text", models.TextField(blank=True)),
                (
                    "penalties_frequency",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="How often are the penalties for breaking resource use rules administered?",
                    ),
                ),
                ("penalties_frequency_text", models.TextField(blank=True)),
                (
                    "multiple_knowledge_ecological",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do planning and management processes draw on multiple knowledge sources (scientific, experiential, local, and traditional knowledge) for monitoring the ecological impacts of the MA?",
                    ),
                ),
                ("multiple_knowledge_ecological_text", models.TextField(blank=True)),
                (
                    "multiple_knowledge_social",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do planning and management processes draw on multiple knowledge sources (scientific, experiential, local, and traditional knowledge) for monitoring the social impacts of the MA?",
                    ),
                ),
                ("multiple_knowledge_social_text", models.TextField(blank=True)),
                (
                    "conflict_resolution_access",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do stakeholders have access to effective conflict resolution mechanisms?",
                    ),
                ),
                ("conflict_resolution_access_text", models.TextField(blank=True)),
                (
                    "management_levels_cohesive",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do different levels of management exist within the MA that function as a cohesive unit?",
                    ),
                ),
                ("management_levels_cohesive_text", models.TextField(blank=True)),
                (
                    "supportive_networks",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do networks exist that develop social relations and support mutual learning among stakeholders?",
                    ),
                ),
                ("supportive_networks_text", models.TextField(blank=True)),
                (
                    "regulations_exist",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are appropriate regulations in place to control natural resource based activities in the MA?",
                    ),
                ),
                ("regulations_exist_text", models.TextField(blank=True)),
                (
                    "management_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do those responsible for managing the MA (e.g., staff/community associations/ management group) have the capacity to enforce the rules and regulations?",
                    ),
                ),
                ("management_capacity_text", models.TextField(blank=True)),
                (
                    "boundary_known",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is the boundary known by all stakeholder groups?",
                    ),
                ),
                ("boundary_known_text", models.TextField(blank=True)),
                (
                    "boundary_defined",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is the boundary clearly defined?",
                    ),
                ),
                ("boundary_defined_text", models.TextField(blank=True)),
                (
                    "management_plan",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is there a management plan for the MA and is it being implemented?",
                    ),
                ),
                ("management_plan_text", models.TextField(blank=True)),
                (
                    "outcomes_achieved_ecological",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="To what extent do you feel the ecological outcomes are being achieved?",
                    ),
                ),
                ("outcomes_achieved_ecological_text", models.TextField(blank=True)),
                (
                    "outcomes_achieved_social",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="To what extent do you feel the social outcomes are being achieved?",
                    ),
                ),
                ("outcomes_achieved_social_text", models.TextField(blank=True)),
                (
                    "multiple_knowledge_integrated",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do those responsible for managing the MA integrate different types of knowledge into management decisions?",
                    ),
                ),
                ("multiple_knowledge_integrated_text", models.TextField(blank=True)),
                (
                    "monitoring_used",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are the results of monitoring, research and evaluation routinely incorporated into decisions and/or policies related to MA management?",
                    ),
                ),
                ("monitoring_used_text", models.TextField(blank=True)),
                (
                    "sufficient_staff",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are there enough people employed or engaged to manage the MA?",
                    ),
                ),
                ("sufficient_staff_text", models.TextField(blank=True)),
                (
                    "staff_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Do those responsible for managing the MA have sufficient capacity (e.g., information and adequate skills) to fulfill management objectives?",
                    ),
                ),
                ("staff_capacity_text", models.TextField(blank=True)),
                (
                    "sufficient_budget",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is the current budget sufficient?",
                    ),
                ),
                ("sufficient_budget_text", models.TextField(blank=True)),
                (
                    "budget_secure",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is the budget secure?",
                    ),
                ),
                ("budget_secure_text", models.TextField(blank=True)),
                (
                    "sufficient_equipment",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is equipment sufficient for management needs?",
                    ),
                ),
                ("sufficient_equipment_text", models.TextField(blank=True)),
                (
                    "climatechange_assessed",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Have observed and anticipated changes in climate, and their associated impacts on people and nature, been assessed, understood, and documented?",
                    ),
                ),
                ("climatechange_assessed_text", models.TextField(blank=True)),
                (
                    "climatechange_incorporated",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is information on climate change being used to inform strategies to build resilience to climate change for local stakeholders?",
                    ),
                ),
                ("climatechange_incorporated_text", models.TextField(blank=True)),
                (
                    "climatechange_managed",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Is the MA consciously managed to adapt to climate change?",
                    ),
                ),
                ("climatechange_managed_text", models.TextField(blank=True)),
                (
                    "climatechange_monitored",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "don't know [10]"),
                            (20, "poor [20]"),
                            (30, "average [30]"),
                            (40, "good [40]"),
                            (50, "excellent [50]"),
                        ],
                        null=True,
                        verbose_name="Are systems in place to monitor and document changes in climate change and increased weather variability and their impacts on people and nature?",
                    ),
                ),
                ("climatechange_monitored_text", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assessment_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GovernanceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="governancetype_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="governancetype_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ManagementArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementarea_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.managementarea",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementarea_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organization_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organization_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SupportSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supportsource_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supportsource_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StakeholderGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stakeholdergroup_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stakeholdergroup_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="region_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="region_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProtectedArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "wdpa_id",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="WDPA ID"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="protectedarea_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="protectedarea_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "accept_tor",
                    models.BooleanField(default=False, verbose_name="accept ToR"),
                ),
                (
                    "affiliation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.organization",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profile_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profile_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
            },
        ),
        migrations.CreateModel(
            name="ManagementAuthority",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementauthority_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementauthority_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
                "verbose_name_plural": "management authorities",
            },
        ),
        migrations.CreateModel(
            name="ManagementAreaVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("date_established", models.DateField(blank=True, null=True)),
                ("version_date", models.DateField()),
                (
                    "recognition_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("local", "local"),
                            ("national", "national"),
                            ("international", "international"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "countries",
                    django_countries.fields.CountryField(max_length=746, multiple=True),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "reported_size",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=11, null=True
                    ),
                ),
                (
                    "point",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "import_file",
                    models.FileField(blank=True, null=True, upload_to="upload"),
                ),
                (
                    "map_image",
                    models.ImageField(blank=True, null=True, upload_to="upload"),
                ),
                ("geospatial_sources", models.TextField(blank=True)),
                (
                    "access_level",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (90, "Open access (open for extraction and entering)"),
                            (50, "Fully restricted access (total extraction ban)"),
                            (
                                10,
                                "Partially Restricted (e.g., periodic closures, restriction by use type, restriction by activity type, species restrictions, gear restrictions, etc.)",
                            ),
                        ],
                        null=True,
                    ),
                ),
                ("access_level_description", models.TextField(blank=True)),
                (
                    "authority_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.managementauthority",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementareaversion_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "governance_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="governance_mas",
                        to="api.governancetype",
                    ),
                ),
                (
                    "management_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="api.managementarea",
                    ),
                ),
                (
                    "protected_area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.protectedarea",
                    ),
                ),
                ("regions", models.ManyToManyField(blank=True, to="api.Region")),
                (
                    "stakeholder_groups",
                    models.ManyToManyField(blank=True, to="api.StakeholderGroup"),
                ),
                (
                    "support_sources",
                    models.ManyToManyField(blank=True, to="api.SupportSource"),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementareaversion_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "management area version",
                "ordering": ["name", "date_established"],
            },
        ),
        migrations.CreateModel(
            name="Collaborator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(70, "admin"), (40, "contributor"), (10, "observer")]
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collaborators",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="collaborator_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="collaborator_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AssessmentChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("event_on", models.DateTimeField(auto_now_add=True)),
                (
                    "event_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "submit Assessment"),
                            (2, "re-open Assessment"),
                            (5, "make Assessment public"),
                            (6, "make Assessment private"),
                            (10, "edit Assessment"),
                        ]
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_changes",
                        to="api.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assessmentchange_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assessmentchange_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assessment_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="management_area_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ma_assessments",
                to="api.managementareaversion",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.organization",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="person_responsible",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="collaborator_aps",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assessment_updated_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="assessment",
            unique_together={("management_area_version", "year")},
        ),
    ]
