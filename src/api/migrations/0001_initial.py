# Generated by Django 3.2.2 on 2021-05-29 22:14

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='affiliation_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='affiliation_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessment_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessment_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(90, 'open'), (80, 'test'), (10, 'published')], default=90)),
                ('data_policy', models.PositiveSmallIntegerField(choices=[(10, 'private'), (90, 'public')], default=90)),
                ('person_responsible_role', models.CharField(choices=[('nonprofit staff', 'nonprofit staff'), ('management area manager', 'management area manager'), ('management area personnel', 'management area personnel'), ('government personnel', 'government personnel'), ('members of local community / indigenous committees', 'members of local community / indigenous committees'), ('community leaders / representatives', 'community leaders / representatives')], max_length=255)),
                ('year', models.PositiveSmallIntegerField()),
                ('count_manager', models.PositiveSmallIntegerField(default=0, verbose_name='MA manager count')),
                ('count_personnel', models.PositiveSmallIntegerField(default=0, verbose_name='MA personnel count')),
                ('count_government', models.PositiveSmallIntegerField(default=0, verbose_name='government personnel count')),
                ('count_committee', models.PositiveSmallIntegerField(default=0, verbose_name='local community/indigenous committee count')),
                ('count_community', models.PositiveSmallIntegerField(default=0, verbose_name='community leader count')),
                ('specific_unit', models.BooleanField(default=False)),
                ('focal_area', models.TextField(blank=True)),
                ('consent_given', models.BooleanField(default=False)),
                ('management_plan_file', models.FileField(blank=True, null=True, upload_to='upload')),
                ('stakeholder_defined_rights', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do local stakeholders have clearly defined rights to the natural resources found inside the MA?')),
                ('vulnerable_defined_rights', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do women or other vulnerable groups living in the local community have clearly defined rights to natural resources within the MA?')),
                ('legislation_exists', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is there legislation in place to enable resource management by local communities?')),
                ('exercise_rights', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are local stakeholders able to exercise their rights to natural resources?')),
                ('benefits_shared', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is there an effective strategy or guideline for ensuring benefits from the MA are shared equitably among local stakeholders?')),
                ('stakeholder_agency', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are stakeholders affected by the rules able to play a role in making changes to the rules?')),
                ('governance_accountable', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are those responsible for governance of the MA held to account if they do not perform their role?')),
                ('timely_information', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do stakeholders receive information from MA authorities in a timely manner?')),
                ('penalties_fair', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are the penalties for breaking resource use rules equal to the size of the offence?')),
                ('penalties_frequency', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='How often are the penalties for breaking resource use rules administered?')),
                ('multiple_knowledge_ecological', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do planning and management processes draw on multiple knowledge sources (scientific, experiential, local, and traditional knowledge) for monitoring the ecological impacts of the MA?')),
                ('multiple_knowledge_social', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do planning and management processes draw on multiple knowledge sources (scientific, experiential, local, and traditional knowledge) for monitoring the social impacts of the MA?')),
                ('conflict_resolution_access', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do stakeholders have access to effective conflict resolution mechanisms?')),
                ('management_levels_cohesive', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do different levels of management exist within the MA that function as a cohesive unit?')),
                ('supportive_networks', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do networks exist that develop social relations and support mutual learning among stakeholders?')),
                ('regulations_exist', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are appropriate regulations in place to control natural resource based activities in the MA?')),
                ('management_capacity', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do those responsible for managing the MA (e.g., staff/community associations/ management group) have the capacity to enforce the rules and regulations?')),
                ('boundary_known', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is the boundary known by all stakeholder groups?')),
                ('boundary_defined', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is the boundary clearly defined?')),
                ('management_plan', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is there a management plan for the MA and is it being implemented?')),
                ('outcomes_achieved_ecological', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='To what extent do you feel the ecological outcomes are being achieved?')),
                ('outcomes_achieved_social', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='To what extent do you feel the social outcomes are being achieved?')),
                ('multiple_knowledge_integrated', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do those responsible for managing the MA integrate different types of knowledge into management decisions?')),
                ('monitoring_used', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are the results of monitoring, research and evaluation routinely incorporated into decisions and/or policies related to MA management?')),
                ('sufficient_staff', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are there enough people (e.g., staff) employed to manage the MA?')),
                ('staff_capacity', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do personnel have sufficient capacity to fulfill management objectives (e.g., enough information about the MA and adequate skills)?')),
                ('sufficient_budget', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is the current budget sufficient?')),
                ('budget_secure', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is the budget secure?')),
                ('sufficient_equipment', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Is equipment sufficient for management needs?')),
                ('climatechange_assessed', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Have observed and anticipated changes in climate, and their associated impacts on people and nature, been assessed, understood, and documented?')),
                ('climatechange_incorporated', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Do MA management plans consciously incorporate measures to manage current and anticipated changes in climate and their social and ecological impacts?')),
                ('climatechange_monitored', models.PositiveSmallIntegerField(blank=True, choices=[(10, "don't know"), (20, 'poor'), (30, 'average'), (40, 'good'), (50, 'excellent')], null=True, verbose_name='Are systems in place to monitor and document changes in climate change and increased weather variability and their impacts on people and nature?')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assessment_periods', to='api.assessment')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessmentperiod_created_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GovernanceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='governancetype_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='governancetype_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ManagementArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('date_established', models.DateField(blank=True, null=True)),
                ('authority_name', models.CharField(blank=True, max_length=255)),
                ('country', django_countries.fields.CountryField(max_length=746, multiple=True)),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('reported_size', models.DecimalField(blank=True, decimal_places=2, max_digits=11, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('import_file', models.FileField(blank=True, null=True, upload_to='upload')),
                ('map_image', models.ImageField(blank=True, null=True, upload_to='upload')),
                ('geospatial_sources', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementarea_created_by', to=settings.AUTH_USER_MODEL)),
                ('governance_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='governance_mas', to='api.governancetype')),
            ],
            options={
                'verbose_name': 'management area',
                'ordering': ['name', 'date_established'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='region_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='region_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtectedArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protectedarea_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protectedarea_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('contact_details', models.TextField(blank=True)),
                ('accept_tor', models.BooleanField(default=False, verbose_name='accept ToR')),
                ('affiliation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.affiliation')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user profile',
            },
        ),
        migrations.CreateModel(
            name='ManagementAreaZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('access_level', models.PositiveSmallIntegerField(choices=[(90, 'Open access (open for extraction and entering)'), (50, 'Fully restricted access (total extraction ban)'), (10, 'Partially Restricted (e.g., periodic closures, restriction by use type, restriction by activity type, species restrictions, gear restrictions, etc.)')], default=90)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementareazone_created_by', to=settings.AUTH_USER_MODEL)),
                ('management_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ma_zones', to='api.managementarea')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementareazone_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'management area zone',
            },
        ),
        migrations.CreateModel(
            name='ManagementAreaGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementareagroup_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementareagroup_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='managementarea',
            name='management_area_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.managementareagroup'),
        ),
        migrations.AddField(
            model_name='managementarea',
            name='region',
            field=models.ManyToManyField(blank=True, to='api.Region'),
        ),
        migrations.AddField(
            model_name='managementarea',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementarea_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Collaborator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(70, 'admin'), (40, 'contributor'), (10, 'observer')])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborators', to='api.assessment')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collaborator_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collaborator_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentPeriodChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('event_on', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.PositiveSmallIntegerField(choices=[(1, 'submit Assessment Period'), (2, 're-open Assessment Period'), (5, 'make Assessment Period public'), (6, 'make Assessment Period private'), (10, 'edit Assessment Period')])),
                ('assessment_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_period_changes', to='api.assessmentperiod')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessmentperiodchange_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessmentperiodchange_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ap_changes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='assessmentperiod',
            name='management_area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ma_assessments', to='api.managementarea'),
        ),
        migrations.AddField(
            model_name='assessmentperiod',
            name='person_responsible',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='collaborator_aps', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentperiod',
            name='protected_area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.protectedarea'),
        ),
        migrations.AddField(
            model_name='assessmentperiod',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessmentperiod_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='assessmentperiod',
            unique_together={('assessment', 'management_area', 'year')},
        ),
    ]
